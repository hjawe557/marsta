
Run the RTC off the LSE clock (external 32768 Hz klock). Could also
work using the LSI (Low Speed Internal), 40 kHz, which would save
us an external oscillator...

Read RTC registers:

18.3.3:

1. Wait for RSF (1<<3) bit to be set in RTC_CRL 
   before reading.

Write RTC registers:

18.3.4:

1. Poll RTOFF, wait until its value goes to ‘1’
2. Set the CNF bit to enter configuration mode
3. Write to one or more RTC registers
4. Clear the CNF bit to exit configuration mode
5. Poll RTOFF, wait until its value goes to ‘1’ to 
   check the end of the write operation.

(f RTCCLK is the external clock)

f TR_CLK = f RTCCLK/(PRL[19:0]+1)

If the input clock frequency (fRTCCLK) is 32.768 kHz, write 7FFFh in
this register to get a signal period of 1 second.

For 20 Hz, use 0x665: 32768/(0x665 + 1) = 20
For 32 Hz, use 0x3ff: 32768/(0x3ff + 1) = 32
For 100 Hz, use 0x3ff: 32768/(0x3ff + 1) = 99.9 (almost...) 



Try stopping peripheral clocks when the peripherals are not
used. Ie, in spi_cs_high(), shut the clock off. After I2C
operations, shut the clock off. Etc...




ifconfig usb1 -arp
ip -6 address add bbbb::0/64 dev usb1



IPv6
====

$ cd /home/erik/e1/upwis/contiki/examples/webserver-ipv6
$ make TARGET=minimal-net
$ su
# ./webserver6.minimal-net 
ifconfig tap0 up
IPV6 Addresss: [fe80::206:98ff:fe00:232]

---8<---

$ su
# ip -6 address add aaaa::1/64 dev tap0
# cat /etc/radvd.conf 
interface tap0
{
        AdvSendAdvert on;
        AdvLinkMTU 1280;
        AdvCurHopLimit 128;
        AdvReachableTime 360000;
        MinRtrAdvInterval 100;
        MaxRtrAdvInterval 150;
        AdvDefaultLifetime 200;
        prefix aaaa::/64
        {
                AdvOnLink on;
                AdvAutonomous on;
                AdvPreferredLifetime 4294967295;
                AdvValidLifetime 4294967295;
        };
};
# /etc/init.d/radvd restart
Stopping radvd: radvd.
Starting radvd: radvd.
# ip -6 route show
aaaa::/64 dev tap0  proto kernel  metric 256  mtu 1500 advmss 1440 hoplimit 0
fe80::/64 dev wlan0  proto kernel  metric 256  mtu 1500 advmss 1440 hoplimit 0
fe80::/64 dev tap0  proto kernel  metric 256  mtu 1500 advmss 1440 hoplimit 0

---8<---

wget -qO- -6 'http://[aaaa::206:98ff:fe00:232]'|lynx -stdin -dump

or in firefox:

http://[aaaa::206:98ff:fe00:232]/

Using the link-local address should also work. It works in firefox like
this:

http://[fe80::0206:98ff:fe00:0232%tap0]

Firefox seems to need a restart after the i/f goes down... ?

---8<---

# ping6 aaaa::206:98ff:fe00:232
PING aaaa::206:98ff:fe00:232(aaaa::206:98ff:fe00:232) 56 data bytes
64 bytes from aaaa::206:98ff:fe00:232: icmp_seq=1 ttl=128 time=0.061 ms
64 bytes from aaaa::206:98ff:fe00:232: icmp_seq=2 ttl=128 time=0.086 ms
^C

# ping6 -I tap0 fe80::206:98ff:fe00:232
PING fe80::206:98ff:fe00:232(fe80::206:98ff:fe00:232) from fe80::e883:3ff:feaa:4ad0 tap0: 56 data bytes
64 bytes from fe80::206:98ff:fe00:232: icmp_seq=1 ttl=128 time=0.095 ms
64 bytes from fe80::206:98ff:fe00:232: icmp_seq=2 ttl=128 time=0.068 ms
^C

---8<---

wireshark is also able to capture the packets on tun0.



#if UIP_CONF_LL_802154
uip_lladdr_t uip_lladdr;
#else /*UIP_CONF_LL_802154*/
uip_lladdr_t uip_lladdr = {{0x00,0x06,0x98,0x00,0x02,0x32}};
#endif /*UIP_CONF_LL_802154*/
